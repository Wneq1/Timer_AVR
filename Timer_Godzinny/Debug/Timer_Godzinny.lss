
Timer_Godzinny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00804000  00000aca  00000b5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000aca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00804010  00804010  00000b6e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004d04  00000000  00000000  00000cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032a6  00000000  00000000  000059d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b61  00000000  00000000  00008c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  000097dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001dcc  00000000  00000000  00009b00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aac  00000000  00000000  0000b8cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000c378  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_8>
  24:	0c 94 1c 04 	jmp	0x838	; 0x838 <__vector_9>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 11 03 	jmp	0x622	; 0x622 <__vector_45>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 20 02 	jmp	0x440	; 0x440 <__vector_47>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ea ec       	ldi	r30, 0xCA	; 202
 108:	fa e0       	ldi	r31, 0x0A	; 10
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 31       	cpi	r26, 0x10	; 16
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a0 e1       	ldi	r26, 0x10	; 16
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a4 32       	cpi	r26, 0x24	; 36
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 c3 03 	call	0x786	; 0x786 <main>
 12e:	0c 94 63 05 	jmp	0xac6	; 0xac6 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <_Z11readEncoderv>:
volatile uint16_t minutes = 0;
volatile uint8_t start_countdown;
volatile uint8_t select_mode = 0;  // 0 - wybór godzin, 1 - wybór minut, 2 - rozpoczêcie odliczania

void readEncoder() {
	if(!countdown_active) { 
 136:	20 91 19 40 	lds	r18, 0x4019	; 0x804019 <countdown_active>
 13a:	21 11       	cpse	r18, r1
 13c:	ac c0       	rjmp	.+344    	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
    if(select_mode != 2) {  // Dodajemy ten warunek
 13e:	20 91 10 40 	lds	r18, 0x4010	; 0x804010 <__data_end>
 142:	22 30       	cpi	r18, 0x02	; 2
 144:	09 f4       	brne	.+2      	; 0x148 <_Z11readEncoderv+0x12>
 146:	a7 c0       	rjmp	.+334    	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
        uint8_t MSB = (PORTA.IN & ENCODER_A_PIN) != 0; //MSB = most significant bit
 148:	e0 e0       	ldi	r30, 0x00	; 0
 14a:	f4 e0       	ldi	r31, 0x04	; 4
 14c:	30 85       	ldd	r19, Z+8	; 0x08
        uint8_t LSB = (PORTA.IN & ENCODER_B_PIN) != 0; //LSB = least significant bit
 14e:	20 85       	ldd	r18, Z+8	; 0x08
 150:	25 fb       	bst	r18, 5
 152:	22 27       	eor	r18, r18
 154:	20 f9       	bld	r18, 0

        uint8_t encoded = (MSB << 1) | LSB; //converting the 2 pin value to single number
 156:	34 fb       	bst	r19, 4
 158:	88 27       	eor	r24, r24
 15a:	80 f9       	bld	r24, 0
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	28 2b       	or	r18, r24
        uint8_t sum  = (lastEncoded << 2) | encoded; //adding it to the previous encoded value
 164:	80 91 16 40 	lds	r24, 0x4016	; 0x804016 <lastEncoded>
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	82 2b       	or	r24, r18

        if(sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) stepCount++;
 174:	8d 30       	cpi	r24, 0x0D	; 13
 176:	31 f0       	breq	.+12     	; 0x184 <_Z11readEncoderv+0x4e>
 178:	84 30       	cpi	r24, 0x04	; 4
 17a:	21 f0       	breq	.+8      	; 0x184 <_Z11readEncoderv+0x4e>
 17c:	82 30       	cpi	r24, 0x02	; 2
 17e:	11 f0       	breq	.+4      	; 0x184 <_Z11readEncoderv+0x4e>
 180:	8b 30       	cpi	r24, 0x0B	; 11
 182:	29 f4       	brne	.+10     	; 0x18e <_Z11readEncoderv+0x58>
 184:	90 91 15 40 	lds	r25, 0x4015	; 0x804015 <stepCount>
 188:	9f 5f       	subi	r25, 0xFF	; 255
 18a:	90 93 15 40 	sts	0x4015, r25	; 0x804015 <stepCount>
        if(sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) stepCount--;
 18e:	8e 30       	cpi	r24, 0x0E	; 14
 190:	31 f0       	breq	.+12     	; 0x19e <_Z11readEncoderv+0x68>
 192:	87 30       	cpi	r24, 0x07	; 7
 194:	21 f0       	breq	.+8      	; 0x19e <_Z11readEncoderv+0x68>
 196:	81 30       	cpi	r24, 0x01	; 1
 198:	11 f0       	breq	.+4      	; 0x19e <_Z11readEncoderv+0x68>
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	29 f4       	brne	.+10     	; 0x1a8 <_Z11readEncoderv+0x72>
 19e:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <stepCount>
 1a2:	81 50       	subi	r24, 0x01	; 1
 1a4:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <stepCount>

        if(stepCount >= STEPS_PER_ROTATION) {
 1a8:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <stepCount>
 1ac:	85 30       	cpi	r24, 0x05	; 5
 1ae:	7c f0       	brlt	.+30     	; 0x1ce <_Z11readEncoderv+0x98>
            encoderValue++;
 1b0:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 1b4:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <encoderValue>
 1be:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <encoderValue+0x1>
            stepCount -= STEPS_PER_ROTATION;
 1c2:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <stepCount>
 1c6:	85 50       	subi	r24, 0x05	; 5
 1c8:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <stepCount>
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <_Z11readEncoderv+0xbc>
        } else if(stepCount <= -STEPS_PER_ROTATION) {
 1ce:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <stepCount>
 1d2:	8c 3f       	cpi	r24, 0xFC	; 252
 1d4:	74 f4       	brge	.+28     	; 0x1f2 <_Z11readEncoderv+0xbc>
            encoderValue--;
 1d6:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 1da:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <encoderValue>
 1e4:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <encoderValue+0x1>
            stepCount += STEPS_PER_ROTATION;
 1e8:	80 91 15 40 	lds	r24, 0x4015	; 0x804015 <stepCount>
 1ec:	8b 5f       	subi	r24, 0xFB	; 251
 1ee:	80 93 15 40 	sts	0x4015, r24	; 0x804015 <stepCount>
        }
        // Ogranicz wartoæ encoderValue do zakresu 0-23 dla godzin i 0-59 dla minut
        if(encoderValue < 0) {
 1f2:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 1f6:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 1fa:	99 23       	and	r25, r25
 1fc:	2c f4       	brge	.+10     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
            encoderValue = 0;
 1fe:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <encoderValue>
 202:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <encoderValue+0x1>
 206:	2c c0       	rjmp	.+88     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
        } else if(select_mode == 0 && encoderValue > 23) {
 208:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 20c:	81 11       	cpse	r24, r1
 20e:	08 c0       	rjmp	.+16     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 210:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 214:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 218:	48 97       	sbiw	r24, 0x18	; 24
 21a:	24 f4       	brge	.+8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	03 c0       	rjmp	.+6      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	01 c0       	rjmp	.+2      	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	88 23       	and	r24, r24
 228:	39 f0       	breq	.+14     	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
            encoderValue = 23;
 22a:	87 e1       	ldi	r24, 0x17	; 23
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <encoderValue>
 232:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <encoderValue+0x1>
 236:	14 c0       	rjmp	.+40     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
        } else if(select_mode == 1 && encoderValue > 59) {
 238:	90 91 10 40 	lds	r25, 0x4010	; 0x804010 <__data_end>
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	41 f4       	brne	.+16     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 240:	40 91 17 40 	lds	r20, 0x4017	; 0x804017 <encoderValue>
 244:	50 91 18 40 	lds	r21, 0x4018	; 0x804018 <encoderValue+0x1>
 248:	4c 33       	cpi	r20, 0x3C	; 60
 24a:	51 05       	cpc	r21, r1
 24c:	0c f0       	brlt	.+2      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	88 23       	and	r24, r24
 252:	31 f0       	breq	.+12     	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
            encoderValue = 59;
 254:	8b e3       	ldi	r24, 0x3B	; 59
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	80 93 17 40 	sts	0x4017, r24	; 0x804017 <encoderValue>
 25c:	90 93 18 40 	sts	0x4018, r25	; 0x804018 <encoderValue+0x1>
        }
        lastEncoded = encoded; //store this value for next time
 260:	20 93 16 40 	sts	0x4016, r18	; 0x804016 <lastEncoded>
        if(select_mode == 0) {
 264:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 268:	81 11       	cpse	r24, r1
 26a:	09 c0       	rjmp	.+18     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
            hours = encoderValue;
 26c:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 270:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 274:	80 93 13 40 	sts	0x4013, r24	; 0x804013 <hours>
 278:	90 93 14 40 	sts	0x4014, r25	; 0x804014 <hours+0x1>
 27c:	08 95       	ret
        } else if(select_mode == 1) {
 27e:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	41 f4       	brne	.+16     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
            minutes = encoderValue;
 286:	80 91 17 40 	lds	r24, 0x4017	; 0x804017 <encoderValue>
 28a:	90 91 18 40 	lds	r25, 0x4018	; 0x804018 <encoderValue+0x1>
 28e:	80 93 11 40 	sts	0x4011, r24	; 0x804011 <minutes>
 292:	90 93 12 40 	sts	0x4012, r25	; 0x804012 <minutes+0x1>
 296:	08 95       	ret

00000298 <_Z12encoder_initv>:
		}
}
		}

void encoder_init() {
	PORTA.DIRCLR = ENCODER_A_PIN | ENCODER_B_PIN | BUTTON_PIN;
 298:	e0 e0       	ldi	r30, 0x00	; 0
 29a:	f4 e0       	ldi	r31, 0x04	; 4
 29c:	88 e3       	ldi	r24, 0x38	; 56
 29e:	82 83       	std	Z+2, r24	; 0x02
	PORTA.PIN4CTRL = PORT_PULLUPEN_bm;
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL = PORT_PULLUPEN_bm;
 2a4:	85 8b       	std	Z+21, r24	; 0x15
	PORTA.PIN3CTRL = PORT_ISC_FALLING_gc | PORT_PULLUPEN_bm;
 2a6:	8b e0       	ldi	r24, 0x0B	; 11
 2a8:	83 8b       	std	Z+19, r24	; 0x13
	PORTA.PIN4CTRL |= PORT_ISC_BOTHEDGES_gc;
 2aa:	84 89       	ldd	r24, Z+20	; 0x14
 2ac:	81 60       	ori	r24, 0x01	; 1
 2ae:	84 8b       	std	Z+20, r24	; 0x14
	PORTA.PIN5CTRL |= PORT_ISC_BOTHEDGES_gc;
 2b0:	85 89       	ldd	r24, Z+21	; 0x15
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	85 8b       	std	Z+21, r24	; 0x15
 2b6:	08 95       	ret

000002b8 <_Z11IN_OUT_Initv>:
#include "Ext_Out.h"

volatile uint8_t on_off_flag;

void IN_OUT_Init(){
		PORTB.DIRSET = LED_PIN;                                   // Ustaw pin diody (PB3) jako wyjcie
 2b8:	e0 e2       	ldi	r30, 0x20	; 32
 2ba:	f4 e0       	ldi	r31, 0x04	; 4
 2bc:	88 e0       	ldi	r24, 0x08	; 8
 2be:	81 83       	std	Z+1, r24	; 0x01
		PORTB.OUTSET = LED_PIN;                                   // Wy³¹cz diodê LED
 2c0:	85 83       	std	Z+5, r24	; 0x05
 2c2:	08 95       	ret

000002c4 <_Z6ON_OFFv>:
}

void ON_OFF(){
	switch(on_off_flag){
 2c4:	80 91 1a 40 	lds	r24, 0x401A	; 0x80401a <on_off_flag>
 2c8:	88 23       	and	r24, r24
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <_Z6ON_OFFv+0xe>
 2cc:	81 30       	cpi	r24, 0x01	; 1
 2ce:	29 f0       	breq	.+10     	; 0x2da <_Z6ON_OFFv+0x16>
 2d0:	08 95       	ret
	case 0:
	PORTB.OUTCLR = LED_PIN; 
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <__TEXT_REGION_LENGTH__+0x7e0426>
	break;
 2d8:	08 95       	ret
	case 1:
	PORTB.OUTSET = LED_PIN; 	
 2da:	88 e0       	ldi	r24, 0x08	; 8
 2dc:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <__TEXT_REGION_LENGTH__+0x7e0425>
 2e0:	08 95       	ret

000002e2 <_Z12Start_Buzzerv>:
volatile uint8_t buzzer_flag = 0;
volatile uint32_t milliseconds = 0;
volatile uint8_t countdown_started = 0;  // Dodajemy now¹ zmienn¹

void Start_Buzzer(){
	if(buzzer_flag){
 2e2:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <buzzer_flag>
 2e6:	88 23       	and	r24, r24
 2e8:	69 f1       	breq	.+90     	; 0x344 <_Z12Start_Buzzerv+0x62>
		PORTC.OUTSET =BUZZER_PIN;
 2ea:	e0 e4       	ldi	r30, 0x40	; 64
 2ec:	f4 e0       	ldi	r31, 0x04	; 4
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	30 e7       	ldi	r19, 0x70	; 112
 2f6:	92 e0       	ldi	r25, 0x02	; 2
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	30 40       	sbci	r19, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <_Z12Start_Buzzerv+0x16>
 300:	00 c0       	rjmp	.+0      	; 0x302 <_Z12Start_Buzzerv+0x20>
 302:	00 00       	nop
		_delay_ms(200);
		PORTC.OUTCLR =BUZZER_PIN;
 304:	86 83       	std	Z+6, r24	; 0x06
 306:	2f e7       	ldi	r18, 0x7F	; 127
 308:	38 e3       	ldi	r19, 0x38	; 56
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	30 40       	sbci	r19, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <_Z12Start_Buzzerv+0x2a>
 314:	00 c0       	rjmp	.+0      	; 0x316 <_Z12Start_Buzzerv+0x34>
 316:	00 00       	nop
		_delay_ms(100);
		PORTC.OUTSET =BUZZER_PIN;
 318:	85 83       	std	Z+5, r24	; 0x05
 31a:	2f e7       	ldi	r18, 0x7F	; 127
 31c:	3a e1       	ldi	r19, 0x1A	; 26
 31e:	96 e0       	ldi	r25, 0x06	; 6
 320:	21 50       	subi	r18, 0x01	; 1
 322:	30 40       	sbci	r19, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <_Z12Start_Buzzerv+0x3e>
 328:	00 c0       	rjmp	.+0      	; 0x32a <_Z12Start_Buzzerv+0x48>
 32a:	00 00       	nop
		_delay_ms(500);
		PORTC.OUTCLR =BUZZER_PIN;
 32c:	86 83       	std	Z+6, r24	; 0x06
 32e:	2f ef       	ldi	r18, 0xFF	; 255
 330:	30 e7       	ldi	r19, 0x70	; 112
 332:	82 e0       	ldi	r24, 0x02	; 2
 334:	21 50       	subi	r18, 0x01	; 1
 336:	30 40       	sbci	r19, 0x00	; 0
 338:	80 40       	sbci	r24, 0x00	; 0
 33a:	e1 f7       	brne	.-8      	; 0x334 <_Z12Start_Buzzerv+0x52>
 33c:	00 c0       	rjmp	.+0      	; 0x33e <_Z12Start_Buzzerv+0x5c>
 33e:	00 00       	nop
		_delay_ms(200);
		buzzer_flag=0;
 340:	10 92 20 40 	sts	0x4020, r1	; 0x804020 <buzzer_flag>
 344:	08 95       	ret

00000346 <_Z11DisplayTimemm>:
	}
}
void DisplayTime(uint32_t hours, uint32_t minutes)
{
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	69 01       	movw	r12, r18
 350:	7a 01       	movw	r14, r20
	uint32_t time = hours * 100 + minutes;  // Konwertuj czas na format HHMM
 352:	a4 e6       	ldi	r26, 0x64	; 100
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	9b 01       	movw	r18, r22
 358:	ac 01       	movw	r20, r24
 35a:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 35e:	dc 01       	movw	r26, r24
 360:	cb 01       	movw	r24, r22
 362:	8c 0d       	add	r24, r12
 364:	9d 1d       	adc	r25, r13
 366:	ae 1d       	adc	r26, r14
 368:	bf 1d       	adc	r27, r15
	DisplayNumber(time);  // Wywietl czas
 36a:	0e 94 22 05 	call	0xa44	; 0xa44 <_Z13DisplayNumberj>
}
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <_Z17DisplayRemainTimemmm>:
void DisplayRemainTime(uint32_t hours, uint32_t minutes, uint32_t milliseconds)
{
 378:	4f 92       	push	r4
 37a:	5f 92       	push	r5
 37c:	6f 92       	push	r6
 37e:	7f 92       	push	r7
 380:	8f 92       	push	r8
 382:	9f 92       	push	r9
 384:	af 92       	push	r10
 386:	bf 92       	push	r11
 388:	cf 92       	push	r12
 38a:	df 92       	push	r13
 38c:	ef 92       	push	r14
 38e:	ff 92       	push	r15
 390:	0f 93       	push	r16
 392:	1f 93       	push	r17
 394:	29 01       	movw	r4, r18
 396:	3a 01       	movw	r6, r20
	uint32_t total_seconds = (hours * 3600) + (minutes * 60);
 398:	a0 e1       	ldi	r26, 0x10	; 16
 39a:	be e0       	ldi	r27, 0x0E	; 14
 39c:	9b 01       	movw	r18, r22
 39e:	ac 01       	movw	r20, r24
 3a0:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 3a4:	4b 01       	movw	r8, r22
 3a6:	5c 01       	movw	r10, r24
 3a8:	ac e3       	ldi	r26, 0x3C	; 60
 3aa:	b0 e0       	ldi	r27, 0x00	; 0
 3ac:	a3 01       	movw	r20, r6
 3ae:	92 01       	movw	r18, r4
 3b0:	0e 94 58 05 	call	0xab0	; 0xab0 <__muluhisi3>
 3b4:	86 0e       	add	r8, r22
 3b6:	97 1e       	adc	r9, r23
 3b8:	a8 1e       	adc	r10, r24
 3ba:	b9 1e       	adc	r11, r25
	uint32_t elapsed_seconds = milliseconds / 1000;
 3bc:	c8 01       	movw	r24, r16
 3be:	b7 01       	movw	r22, r14
 3c0:	28 ee       	ldi	r18, 0xE8	; 232
 3c2:	33 e0       	ldi	r19, 0x03	; 3
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	50 e0       	ldi	r21, 0x00	; 0
 3c8:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
	uint32_t remaining_seconds = total_seconds - elapsed_seconds;
 3cc:	75 01       	movw	r14, r10
 3ce:	64 01       	movw	r12, r8
 3d0:	c2 1a       	sub	r12, r18
 3d2:	d3 0a       	sbc	r13, r19
 3d4:	e4 0a       	sbc	r14, r20
 3d6:	f5 0a       	sbc	r15, r21

	uint32_t display_minutes = remaining_seconds / 60;
 3d8:	0f 2e       	mov	r0, r31
 3da:	fc e3       	ldi	r31, 0x3C	; 60
 3dc:	8f 2e       	mov	r8, r31
 3de:	91 2c       	mov	r9, r1
 3e0:	a1 2c       	mov	r10, r1
 3e2:	b1 2c       	mov	r11, r1
 3e4:	f0 2d       	mov	r31, r0
 3e6:	c7 01       	movw	r24, r14
 3e8:	b6 01       	movw	r22, r12
 3ea:	a5 01       	movw	r20, r10
 3ec:	94 01       	movw	r18, r8
 3ee:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 3f2:	29 01       	movw	r4, r18
 3f4:	3a 01       	movw	r6, r20
	uint32_t display_hours = display_minutes / 60;
 3f6:	c7 01       	movw	r24, r14
 3f8:	b6 01       	movw	r22, r12
 3fa:	20 e1       	ldi	r18, 0x10	; 16
 3fc:	3e e0       	ldi	r19, 0x0E	; 14
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 406:	69 01       	movw	r12, r18
 408:	7a 01       	movw	r14, r20
	display_minutes = display_minutes % 60;  // Oblicz pozosta³e minuty po odjêciu godzin
 40a:	c3 01       	movw	r24, r6
 40c:	b2 01       	movw	r22, r4
 40e:	a5 01       	movw	r20, r10
 410:	94 01       	movw	r18, r8
 412:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 416:	9b 01       	movw	r18, r22
 418:	ac 01       	movw	r20, r24

	DisplayTime(display_hours, display_minutes);  // Wywietl pozosta³y czas
 41a:	c7 01       	movw	r24, r14
 41c:	b6 01       	movw	r22, r12
 41e:	0e 94 a3 01 	call	0x346	; 0x346 <_Z11DisplayTimemm>
}
 422:	1f 91       	pop	r17
 424:	0f 91       	pop	r16
 426:	ff 90       	pop	r15
 428:	ef 90       	pop	r14
 42a:	df 90       	pop	r13
 42c:	cf 90       	pop	r12
 42e:	bf 90       	pop	r11
 430:	af 90       	pop	r10
 432:	9f 90       	pop	r9
 434:	8f 90       	pop	r8
 436:	7f 90       	pop	r7
 438:	6f 90       	pop	r6
 43a:	5f 90       	pop	r5
 43c:	4f 90       	pop	r4
 43e:	08 95       	ret

00000440 <__vector_47>:
ISR(TCA1_OVF_vect)
{
 440:	1f 92       	push	r1
 442:	0f 92       	push	r0
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	0f 92       	push	r0
 448:	11 24       	eor	r1, r1
 44a:	0b b6       	in	r0, 0x3b	; 59
 44c:	0f 92       	push	r0
 44e:	4f 92       	push	r4
 450:	5f 92       	push	r5
 452:	6f 92       	push	r6
 454:	7f 92       	push	r7
 456:	8f 92       	push	r8
 458:	9f 92       	push	r9
 45a:	af 92       	push	r10
 45c:	bf 92       	push	r11
 45e:	cf 92       	push	r12
 460:	df 92       	push	r13
 462:	ef 92       	push	r14
 464:	ff 92       	push	r15
 466:	2f 93       	push	r18
 468:	3f 93       	push	r19
 46a:	4f 93       	push	r20
 46c:	5f 93       	push	r21
 46e:	6f 93       	push	r22
 470:	7f 93       	push	r23
 472:	8f 93       	push	r24
 474:	9f 93       	push	r25
 476:	af 93       	push	r26
 478:	bf 93       	push	r27
 47a:	ef 93       	push	r30
 47c:	ff 93       	push	r31
	if(select_mode == 2)
 47e:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	09 f0       	breq	.+2      	; 0x488 <__vector_47+0x48>
 486:	ab c0       	rjmp	.+342    	; 0x5de <__vector_47+0x19e>
	{
		countdown_started = 1;  // Rozpoczêlimy odliczanie
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	80 93 1b 40 	sts	0x401B, r24	; 0x80401b <countdown_started>
		on_off_flag = 0;
 48e:	10 92 1a 40 	sts	0x401A, r1	; 0x80401a <on_off_flag>
		milliseconds++;
 492:	80 91 1c 40 	lds	r24, 0x401C	; 0x80401c <milliseconds>
 496:	90 91 1d 40 	lds	r25, 0x401D	; 0x80401d <milliseconds+0x1>
 49a:	a0 91 1e 40 	lds	r26, 0x401E	; 0x80401e <milliseconds+0x2>
 49e:	b0 91 1f 40 	lds	r27, 0x401F	; 0x80401f <milliseconds+0x3>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	a1 1d       	adc	r26, r1
 4a6:	b1 1d       	adc	r27, r1
 4a8:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <milliseconds>
 4ac:	90 93 1d 40 	sts	0x401D, r25	; 0x80401d <milliseconds+0x1>
 4b0:	a0 93 1e 40 	sts	0x401E, r26	; 0x80401e <milliseconds+0x2>
 4b4:	b0 93 1f 40 	sts	0x401F, r27	; 0x80401f <milliseconds+0x3>
		if(milliseconds % 1000 == 0)  // Co sekundê
 4b8:	60 91 1c 40 	lds	r22, 0x401C	; 0x80401c <milliseconds>
 4bc:	70 91 1d 40 	lds	r23, 0x401D	; 0x80401d <milliseconds+0x1>
 4c0:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <milliseconds+0x2>
 4c4:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <milliseconds+0x3>
 4c8:	28 ee       	ldi	r18, 0xE8	; 232
 4ca:	33 e0       	ldi	r19, 0x03	; 3
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 4d4:	67 2b       	or	r22, r23
 4d6:	68 2b       	or	r22, r24
 4d8:	69 2b       	or	r22, r25
 4da:	09 f0       	breq	.+2      	; 0x4de <__vector_47+0x9e>
 4dc:	46 c0       	rjmp	.+140    	; 0x56a <__vector_47+0x12a>
		{
			uint32_t remaining_seconds = (hours * 3600) - (milliseconds / 1000);
 4de:	20 91 13 40 	lds	r18, 0x4013	; 0x804013 <hours>
 4e2:	30 91 14 40 	lds	r19, 0x4014	; 0x804014 <hours+0x1>
 4e6:	80 e1       	ldi	r24, 0x10	; 16
 4e8:	9e e0       	ldi	r25, 0x0E	; 14
 4ea:	28 9f       	mul	r18, r24
 4ec:	60 01       	movw	r12, r0
 4ee:	29 9f       	mul	r18, r25
 4f0:	d0 0c       	add	r13, r0
 4f2:	38 9f       	mul	r19, r24
 4f4:	d0 0c       	add	r13, r0
 4f6:	11 24       	eor	r1, r1
 4f8:	e1 2c       	mov	r14, r1
 4fa:	f1 2c       	mov	r15, r1
 4fc:	60 91 1c 40 	lds	r22, 0x401C	; 0x80401c <milliseconds>
 500:	70 91 1d 40 	lds	r23, 0x401D	; 0x80401d <milliseconds+0x1>
 504:	80 91 1e 40 	lds	r24, 0x401E	; 0x80401e <milliseconds+0x2>
 508:	90 91 1f 40 	lds	r25, 0x401F	; 0x80401f <milliseconds+0x3>
 50c:	28 ee       	ldi	r18, 0xE8	; 232
 50e:	33 e0       	ldi	r19, 0x03	; 3
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	50 e0       	ldi	r21, 0x00	; 0
 514:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 518:	c2 1a       	sub	r12, r18
 51a:	d3 0a       	sbc	r13, r19
 51c:	e4 0a       	sbc	r14, r20
 51e:	f5 0a       	sbc	r15, r21
			uint32_t display_minutes = remaining_seconds / 60;
 520:	0f 2e       	mov	r0, r31
 522:	fc e3       	ldi	r31, 0x3C	; 60
 524:	8f 2e       	mov	r8, r31
 526:	91 2c       	mov	r9, r1
 528:	a1 2c       	mov	r10, r1
 52a:	b1 2c       	mov	r11, r1
 52c:	f0 2d       	mov	r31, r0
 52e:	c7 01       	movw	r24, r14
 530:	b6 01       	movw	r22, r12
 532:	a5 01       	movw	r20, r10
 534:	94 01       	movw	r18, r8
 536:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 53a:	29 01       	movw	r4, r18
 53c:	3a 01       	movw	r6, r20
			uint32_t display_hours = display_minutes / 60;
 53e:	c7 01       	movw	r24, r14
 540:	b6 01       	movw	r22, r12
 542:	20 e1       	ldi	r18, 0x10	; 16
 544:	3e e0       	ldi	r19, 0x0E	; 14
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 54e:	69 01       	movw	r12, r18
 550:	7a 01       	movw	r14, r20
			display_minutes = display_minutes % 60;  // Oblicz pozosta³e minuty po odjêciu godzin
 552:	c3 01       	movw	r24, r6
 554:	b2 01       	movw	r22, r4
 556:	a5 01       	movw	r20, r10
 558:	94 01       	movw	r18, r8
 55a:	0e 94 27 05 	call	0xa4e	; 0xa4e <__udivmodsi4>
 55e:	9b 01       	movw	r18, r22
 560:	ac 01       	movw	r20, r24
			DisplayTime(display_hours, display_minutes);  // Wywietl pozosta³y czas
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	0e 94 a3 01 	call	0x346	; 0x346 <_Z11DisplayTimemm>
		}
		if(milliseconds >= ((uint32_t)(hours * 60 + minutes) * 60 * 1000))  // Po okrelonej liczbie godzin
 56a:	80 91 13 40 	lds	r24, 0x4013	; 0x804013 <hours>
 56e:	90 91 14 40 	lds	r25, 0x4014	; 0x804014 <hours+0x1>
 572:	4c e3       	ldi	r20, 0x3C	; 60
 574:	48 9f       	mul	r20, r24
 576:	90 01       	movw	r18, r0
 578:	49 9f       	mul	r20, r25
 57a:	30 0d       	add	r19, r0
 57c:	11 24       	eor	r1, r1
 57e:	80 91 11 40 	lds	r24, 0x4011	; 0x804011 <minutes>
 582:	90 91 12 40 	lds	r25, 0x4012	; 0x804012 <minutes+0x1>
 586:	28 0f       	add	r18, r24
 588:	39 1f       	adc	r19, r25
 58a:	a0 e6       	ldi	r26, 0x60	; 96
 58c:	ba ee       	ldi	r27, 0xEA	; 234
 58e:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 592:	c0 90 1c 40 	lds	r12, 0x401C	; 0x80401c <milliseconds>
 596:	d0 90 1d 40 	lds	r13, 0x401D	; 0x80401d <milliseconds+0x1>
 59a:	e0 90 1e 40 	lds	r14, 0x401E	; 0x80401e <milliseconds+0x2>
 59e:	f0 90 1f 40 	lds	r15, 0x401F	; 0x80401f <milliseconds+0x3>
 5a2:	c6 16       	cp	r12, r22
 5a4:	d7 06       	cpc	r13, r23
 5a6:	e8 06       	cpc	r14, r24
 5a8:	f9 06       	cpc	r15, r25
 5aa:	c8 f0       	brcs	.+50     	; 0x5de <__vector_47+0x19e>
		{
			on_off_flag = 1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <on_off_flag>
			buzzer_flag = 1;
 5b2:	80 93 20 40 	sts	0x4020, r24	; 0x804020 <buzzer_flag>
			milliseconds = 0;
 5b6:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <milliseconds>
 5ba:	10 92 1d 40 	sts	0x401D, r1	; 0x80401d <milliseconds+0x1>
 5be:	10 92 1e 40 	sts	0x401E, r1	; 0x80401e <milliseconds+0x2>
 5c2:	10 92 1f 40 	sts	0x401F, r1	; 0x80401f <milliseconds+0x3>
			select_mode = 0;
 5c6:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <__data_end>
			hours = 0;
 5ca:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <hours>
 5ce:	10 92 14 40 	sts	0x4014, r1	; 0x804014 <hours+0x1>
			minutes =0;
 5d2:	10 92 11 40 	sts	0x4011, r1	; 0x804011 <minutes>
 5d6:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <minutes+0x1>
			countdown_started = 0;
 5da:	10 92 1b 40 	sts	0x401B, r1	; 0x80401b <countdown_started>
		}
	}

	TCA1.SINGLE.INTFLAGS = TCA_SINGLE_OVF_bm;  // Wyczyæ flagê przerwania
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	80 93 4b 0a 	sts	0x0A4B, r24	; 0x800a4b <__TEXT_REGION_LENGTH__+0x7e0a4b>
}
 5e4:	ff 91       	pop	r31
 5e6:	ef 91       	pop	r30
 5e8:	bf 91       	pop	r27
 5ea:	af 91       	pop	r26
 5ec:	9f 91       	pop	r25
 5ee:	8f 91       	pop	r24
 5f0:	7f 91       	pop	r23
 5f2:	6f 91       	pop	r22
 5f4:	5f 91       	pop	r21
 5f6:	4f 91       	pop	r20
 5f8:	3f 91       	pop	r19
 5fa:	2f 91       	pop	r18
 5fc:	ff 90       	pop	r15
 5fe:	ef 90       	pop	r14
 600:	df 90       	pop	r13
 602:	cf 90       	pop	r12
 604:	bf 90       	pop	r11
 606:	af 90       	pop	r10
 608:	9f 90       	pop	r9
 60a:	8f 90       	pop	r8
 60c:	7f 90       	pop	r7
 60e:	6f 90       	pop	r6
 610:	5f 90       	pop	r5
 612:	4f 90       	pop	r4
 614:	0f 90       	pop	r0
 616:	0b be       	out	0x3b, r0	; 59
 618:	0f 90       	pop	r0
 61a:	0f be       	out	0x3f, r0	; 63
 61c:	0f 90       	pop	r0
 61e:	1f 90       	pop	r1
 620:	18 95       	reti

00000622 <__vector_45>:

ISR(PORTB_PORT_vect){
 622:	1f 92       	push	r1
 624:	0f 92       	push	r0
 626:	0f b6       	in	r0, 0x3f	; 63
 628:	0f 92       	push	r0
 62a:	11 24       	eor	r1, r1
 62c:	0b b6       	in	r0, 0x3b	; 59
 62e:	0f 92       	push	r0
 630:	2f 93       	push	r18
 632:	3f 93       	push	r19
 634:	4f 93       	push	r20
 636:	5f 93       	push	r21
 638:	6f 93       	push	r22
 63a:	7f 93       	push	r23
 63c:	8f 93       	push	r24
 63e:	9f 93       	push	r25
 640:	af 93       	push	r26
 642:	bf 93       	push	r27
 644:	ef 93       	push	r30
 646:	ff 93       	push	r31
	if(!(PORTB.IN & RESET_BUTTON))  // Jeli przycisk Pb2 jest naciniêty
 648:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 64c:	82 fd       	sbrc	r24, 2
 64e:	27 c0       	rjmp	.+78     	; 0x69e <__vector_45+0x7c>
	{
				countdown_started = 0;  // Zatrzymujemy odliczanie
 650:	10 92 1b 40 	sts	0x401B, r1	; 0x80401b <countdown_started>
		select_mode = 0;  // Zatrzymaj odliczanie
 654:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <__data_end>
		hours = 0;  // Zresetuj godziny
 658:	10 92 13 40 	sts	0x4013, r1	; 0x804013 <hours>
 65c:	10 92 14 40 	sts	0x4014, r1	; 0x804014 <hours+0x1>
		minutes = 0;  // Zresetuj minuty
 660:	10 92 11 40 	sts	0x4011, r1	; 0x804011 <minutes>
 664:	10 92 12 40 	sts	0x4012, r1	; 0x804012 <minutes+0x1>
		milliseconds = 0;  // Zresetuj milisekundy
 668:	10 92 1c 40 	sts	0x401C, r1	; 0x80401c <milliseconds>
 66c:	10 92 1d 40 	sts	0x401D, r1	; 0x80401d <milliseconds+0x1>
 670:	10 92 1e 40 	sts	0x401E, r1	; 0x80401e <milliseconds+0x2>
 674:	10 92 1f 40 	sts	0x401F, r1	; 0x80401f <milliseconds+0x3>
		countdown_active = 0;  // Zatrzymujemy odliczanie
 678:	10 92 19 40 	sts	0x4019, r1	; 0x804019 <countdown_active>
		DisplayTime(hours, minutes);  // Wywietl zresetowany czas
 67c:	20 91 11 40 	lds	r18, 0x4011	; 0x804011 <minutes>
 680:	30 91 12 40 	lds	r19, 0x4012	; 0x804012 <minutes+0x1>
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	60 91 13 40 	lds	r22, 0x4013	; 0x804013 <hours>
 68c:	70 91 14 40 	lds	r23, 0x4014	; 0x804014 <hours+0x1>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	0e 94 a3 01 	call	0x346	; 0x346 <_Z11DisplayTimemm>
		on_off_flag =1;
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <on_off_flag>
	}
	PORTB.INTFLAGS=RESET_BUTTON;
 69e:	84 e0       	ldi	r24, 0x04	; 4
 6a0:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
}
 6a4:	ff 91       	pop	r31
 6a6:	ef 91       	pop	r30
 6a8:	bf 91       	pop	r27
 6aa:	af 91       	pop	r26
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	7f 91       	pop	r23
 6b2:	6f 91       	pop	r22
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	0b be       	out	0x3b, r0	; 59
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_8>:


ISR(PORTA_PORT_vect)
{
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	0b b6       	in	r0, 0x3b	; 59
 6d6:	0f 92       	push	r0
 6d8:	2f 93       	push	r18
 6da:	3f 93       	push	r19
 6dc:	4f 93       	push	r20
 6de:	5f 93       	push	r21
 6e0:	6f 93       	push	r22
 6e2:	7f 93       	push	r23
 6e4:	8f 93       	push	r24
 6e6:	9f 93       	push	r25
 6e8:	af 93       	push	r26
 6ea:	bf 93       	push	r27
 6ec:	ef 93       	push	r30
 6ee:	ff 93       	push	r31
	if(!(PORTA.IN & BUTTON_PIN))  // Jeli przycisk jest naciniêty
 6f0:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
 6f4:	83 fd       	sbrc	r24, 3
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <__vector_8+0x56>
	{
		if(!countdown_started) {  // Jeli odliczanie nie zosta³o jeszcze rozpoczête
 6f8:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <countdown_started>
 6fc:	81 11       	cpse	r24, r1
 6fe:	10 c0       	rjmp	.+32     	; 0x720 <__vector_8+0x56>
			if(select_mode < 2) {
 700:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 704:	82 30       	cpi	r24, 0x02	; 2
 706:	50 f4       	brcc	.+20     	; 0x71c <__vector_8+0x52>
				select_mode++;
 708:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 70c:	8f 5f       	subi	r24, 0xFF	; 255
 70e:	80 93 10 40 	sts	0x4010, r24	; 0x804010 <__data_end>
				encoderValue = 0;
 712:	10 92 17 40 	sts	0x4017, r1	; 0x804017 <encoderValue>
 716:	10 92 18 40 	sts	0x4018, r1	; 0x804018 <encoderValue+0x1>
 71a:	02 c0       	rjmp	.+4      	; 0x720 <__vector_8+0x56>
				} else {
				select_mode = 0;
 71c:	10 92 10 40 	sts	0x4010, r1	; 0x804010 <__data_end>
			}
		}
	}

	// Obs³uga enkodera
	if(!countdown_started) {  // Jeli odliczanie nie zosta³o jeszcze rozpoczête
 720:	80 91 1b 40 	lds	r24, 0x401B	; 0x80401b <countdown_started>
 724:	81 11       	cpse	r24, r1
 726:	02 c0       	rjmp	.+4      	; 0x72c <__vector_8+0x62>
		readEncoder();
 728:	0e 94 9b 00 	call	0x136	; 0x136 <_Z11readEncoderv>
	}

	PORTA.INTFLAGS = BUTTON_PIN | ENCODER_A_PIN | ENCODER_B_PIN;  // Wyczyæ flagi przerwania
 72c:	88 e3       	ldi	r24, 0x38	; 56
 72e:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <__TEXT_REGION_LENGTH__+0x7e0409>
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	bf 91       	pop	r27
 738:	af 91       	pop	r26
 73a:	9f 91       	pop	r25
 73c:	8f 91       	pop	r24
 73e:	7f 91       	pop	r23
 740:	6f 91       	pop	r22
 742:	5f 91       	pop	r21
 744:	4f 91       	pop	r20
 746:	3f 91       	pop	r19
 748:	2f 91       	pop	r18
 74a:	0f 90       	pop	r0
 74c:	0b be       	out	0x3b, r0	; 59
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <_Z12Timer_2_Initv>:
void Timer_2_Init(){
	// Konfiguracja Timer/Counter Type A (TCA)
	TCA1.SINGLE.CTRLA = TCA_SINGLE_ENABLE_bm;         // W³¹cz timer
 758:	e0 e4       	ldi	r30, 0x40	; 64
 75a:	fa e0       	ldi	r31, 0x0A	; 10
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	90 83       	st	Z, r25
	TCA1.SINGLE.CTRLA |= TCA_SINGLE_CLKSEL_DIV16_gc;  // Ustaw prescaler na DIV16
 760:	80 81       	ld	r24, Z
 762:	88 60       	ori	r24, 0x08	; 8
 764:	80 83       	st	Z, r24
	TCA1.SINGLE.PER = (F_CPU / 16 / 1000) - 1;        // Ustaw okres na 1 ms
 766:	29 ef       	ldi	r18, 0xF9	; 249
 768:	30 e0       	ldi	r19, 0x00	; 0
 76a:	26 a3       	std	Z+38, r18	; 0x26
 76c:	37 a3       	std	Z+39, r19	; 0x27
	TCA1.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;          // W³¹cz przerwanie od przepelnienia
 76e:	92 87       	std	Z+10, r25	; 0x0a
 770:	08 95       	ret

00000772 <_Z14Periphals_Initv>:
}
void Periphals_Init(){
	PORTC.DIRSET = BUZZER_PIN;
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
	PORTB.DIRCLR = RESET_BUTTON;
 778:	e0 e2       	ldi	r30, 0x20	; 32
 77a:	f4 e0       	ldi	r31, 0x04	; 4
 77c:	84 e0       	ldi	r24, 0x04	; 4
 77e:	82 83       	std	Z+2, r24	; 0x02
	
	PORTB.PIN2CTRL = PORT_ISC_FALLING_gc |PORT_PULLUPEN_bm;
 780:	8b e0       	ldi	r24, 0x0B	; 11
 782:	82 8b       	std	Z+18, r24	; 0x12
 784:	08 95       	ret

00000786 <main>:

}


int main(void) {
	Timer_init();
 786:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_Z10Timer_initv>
	Disp_init();
 78a:	0e 94 1b 05 	call	0xa36	; 0xa36 <_Z9Disp_initv>
	Timer_2_Init();
 78e:	0e 94 ac 03 	call	0x758	; 0x758 <_Z12Timer_2_Initv>
	Periphals_Init();
 792:	0e 94 b9 03 	call	0x772	; 0x772 <_Z14Periphals_Initv>
	encoder_init();
 796:	0e 94 4c 01 	call	0x298	; 0x298 <_Z12encoder_initv>
	IN_OUT_Init();
 79a:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <_Z11IN_OUT_Initv>
	sei();
 79e:	78 94       	sei
on_off_flag =1;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <on_off_flag>
	while (1) {
		ON_OFF();
 7a6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <_Z6ON_OFFv>
		if(select_mode < 2)
 7aa:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 7ae:	82 30       	cpi	r24, 0x02	; 2
 7b0:	40 f5       	brcc	.+80     	; 0x802 <main+0x7c>
		{
			if(select_mode == 0) {
 7b2:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 7b6:	81 11       	cpse	r24, r1
 7b8:	0f c0       	rjmp	.+30     	; 0x7d8 <main+0x52>
				DisplayTime(hours, minutes);  // Wywietl ustawione godziny
 7ba:	20 91 11 40 	lds	r18, 0x4011	; 0x804011 <minutes>
 7be:	30 91 12 40 	lds	r19, 0x4012	; 0x804012 <minutes+0x1>
 7c2:	40 e0       	ldi	r20, 0x00	; 0
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	60 91 13 40 	lds	r22, 0x4013	; 0x804013 <hours>
 7ca:	70 91 14 40 	lds	r23, 0x4014	; 0x804014 <hours+0x1>
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	0e 94 a3 01 	call	0x346	; 0x346 <_Z11DisplayTimemm>
 7d6:	12 c0       	rjmp	.+36     	; 0x7fc <main+0x76>
				} else if(select_mode == 1) {
 7d8:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 7dc:	81 30       	cpi	r24, 0x01	; 1
 7de:	71 f4       	brne	.+28     	; 0x7fc <main+0x76>
				DisplayTime(hours, minutes);  // Wywietl ustawione minuty
 7e0:	20 91 11 40 	lds	r18, 0x4011	; 0x804011 <minutes>
 7e4:	30 91 12 40 	lds	r19, 0x4012	; 0x804012 <minutes+0x1>
 7e8:	40 e0       	ldi	r20, 0x00	; 0
 7ea:	50 e0       	ldi	r21, 0x00	; 0
 7ec:	60 91 13 40 	lds	r22, 0x4013	; 0x804013 <hours>
 7f0:	70 91 14 40 	lds	r23, 0x4014	; 0x804014 <hours+0x1>
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 a3 01 	call	0x346	; 0x346 <_Z11DisplayTimemm>
			}
			Start_Buzzer();
 7fc:	0e 94 71 01 	call	0x2e2	; 0x2e2 <_Z12Start_Buzzerv>
 800:	d2 cf       	rjmp	.-92     	; 0x7a6 <main+0x20>
			} else if(select_mode == 2) {
 802:	80 91 10 40 	lds	r24, 0x4010	; 0x804010 <__data_end>
 806:	82 30       	cpi	r24, 0x02	; 2
 808:	71 f6       	brne	.-100    	; 0x7a6 <main+0x20>
			DisplayRemainTime(hours, minutes, milliseconds);  // Wywietl pozosta³y czas
 80a:	e0 90 1c 40 	lds	r14, 0x401C	; 0x80401c <milliseconds>
 80e:	f0 90 1d 40 	lds	r15, 0x401D	; 0x80401d <milliseconds+0x1>
 812:	00 91 1e 40 	lds	r16, 0x401E	; 0x80401e <milliseconds+0x2>
 816:	10 91 1f 40 	lds	r17, 0x401F	; 0x80401f <milliseconds+0x3>
 81a:	20 91 11 40 	lds	r18, 0x4011	; 0x804011 <minutes>
 81e:	30 91 12 40 	lds	r19, 0x4012	; 0x804012 <minutes+0x1>
 822:	40 e0       	ldi	r20, 0x00	; 0
 824:	50 e0       	ldi	r21, 0x00	; 0
 826:	60 91 13 40 	lds	r22, 0x4013	; 0x804013 <hours>
 82a:	70 91 14 40 	lds	r23, 0x4014	; 0x804014 <hours+0x1>
 82e:	80 e0       	ldi	r24, 0x00	; 0
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 bc 01 	call	0x378	; 0x378 <_Z17DisplayRemainTimemmm>
 836:	b7 cf       	rjmp	.-146    	; 0x7a6 <main+0x20>

00000838 <__vector_9>:
	SEG_0, SEG_1, SEG_2, SEG_3, SEG_4, SEG_5, SEG_6, SEG_7,
	SEG_8, SEG_9, SEG_A, SEG_B, SEG_C, SEG_D, SEG_E, SEG_F
};

// Funkcja do obs³ugi przerwania od timera
ISR(TCA0_OVF_vect) {
 838:	1f 92       	push	r1
 83a:	0f 92       	push	r0
 83c:	0f b6       	in	r0, 0x3f	; 63
 83e:	0f 92       	push	r0
 840:	11 24       	eor	r1, r1
 842:	0b b6       	in	r0, 0x3b	; 59
 844:	0f 92       	push	r0
 846:	2f 93       	push	r18
 848:	3f 93       	push	r19
 84a:	4f 93       	push	r20
 84c:	6f 93       	push	r22
 84e:	7f 93       	push	r23
 850:	8f 93       	push	r24
 852:	9f 93       	push	r25
 854:	af 93       	push	r26
 856:	bf 93       	push	r27
 858:	ef 93       	push	r30
 85a:	ff 93       	push	r31
	static uint8_t digit_count = 0;
	uint8_t temp;

	PORT_CTRL.OUTCLR = SegOne | SegTwo | SegThree | SegFour;
 85c:	8f e0       	ldi	r24, 0x0F	; 15
 85e:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <__TEXT_REGION_LENGTH__+0x7e0486>

	switch (digit_count) {
 862:	40 91 21 40 	lds	r20, 0x4021	; 0x804021 <_ZZ10__vector_9E11digit_count>
 866:	41 30       	cpi	r20, 0x01	; 1
 868:	31 f1       	breq	.+76     	; 0x8b6 <__vector_9+0x7e>
 86a:	38 f0       	brcs	.+14     	; 0x87a <__vector_9+0x42>
 86c:	42 30       	cpi	r20, 0x02	; 2
 86e:	09 f4       	brne	.+2      	; 0x872 <__vector_9+0x3a>
 870:	56 c0       	rjmp	.+172    	; 0x91e <__vector_9+0xe6>
 872:	43 30       	cpi	r20, 0x03	; 3
 874:	09 f4       	brne	.+2      	; 0x878 <__vector_9+0x40>
 876:	85 c0       	rjmp	.+266    	; 0x982 <__vector_9+0x14a>
 878:	ac c0       	rjmp	.+344    	; 0x9d2 <__vector_9+0x19a>
		case 0:
		temp = cnt / 1000;
 87a:	20 91 22 40 	lds	r18, 0x4022	; 0x804022 <cnt>
 87e:	30 91 23 40 	lds	r19, 0x4023	; 0x804023 <cnt+0x1>
 882:	36 95       	lsr	r19
 884:	27 95       	ror	r18
 886:	36 95       	lsr	r19
 888:	27 95       	ror	r18
 88a:	36 95       	lsr	r19
 88c:	27 95       	ror	r18
 88e:	a5 ec       	ldi	r26, 0xC5	; 197
 890:	b0 e2       	ldi	r27, 0x20	; 32
 892:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
		PORT_CTRL.OUTSET = SegOne;
 896:	24 e0       	ldi	r18, 0x04	; 4
 898:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
		PORT_SEGMENTS.OUT = seg_code[temp];
 89c:	92 95       	swap	r25
 89e:	82 95       	swap	r24
 8a0:	8f 70       	andi	r24, 0x0F	; 15
 8a2:	89 27       	eor	r24, r25
 8a4:	9f 70       	andi	r25, 0x0F	; 15
 8a6:	89 27       	eor	r24, r25
 8a8:	fc 01       	movw	r30, r24
 8aa:	e0 50       	subi	r30, 0x00	; 0
 8ac:	f0 4c       	sbci	r31, 0xC0	; 192
 8ae:	80 81       	ld	r24, Z
 8b0:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		break;
 8b4:	8e c0       	rjmp	.+284    	; 0x9d2 <__vector_9+0x19a>
		case 1:
		temp = (cnt / 100) % 10;
 8b6:	20 91 22 40 	lds	r18, 0x4022	; 0x804022 <cnt>
 8ba:	30 91 23 40 	lds	r19, 0x4023	; 0x804023 <cnt+0x1>
 8be:	36 95       	lsr	r19
 8c0:	27 95       	ror	r18
 8c2:	36 95       	lsr	r19
 8c4:	27 95       	ror	r18
 8c6:	ab e7       	ldi	r26, 0x7B	; 123
 8c8:	b4 e1       	ldi	r27, 0x14	; 20
 8ca:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 8ce:	fc 01       	movw	r30, r24
 8d0:	f6 95       	lsr	r31
 8d2:	e7 95       	ror	r30
 8d4:	9f 01       	movw	r18, r30
 8d6:	ad ec       	ldi	r26, 0xCD	; 205
 8d8:	bc ec       	ldi	r27, 0xCC	; 204
 8da:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 8de:	96 95       	lsr	r25
 8e0:	87 95       	ror	r24
 8e2:	96 95       	lsr	r25
 8e4:	87 95       	ror	r24
 8e6:	96 95       	lsr	r25
 8e8:	87 95       	ror	r24
 8ea:	9c 01       	movw	r18, r24
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	82 0f       	add	r24, r18
 8fe:	93 1f       	adc	r25, r19
 900:	9f 01       	movw	r18, r30
 902:	28 1b       	sub	r18, r24
 904:	39 0b       	sbc	r19, r25
 906:	c9 01       	movw	r24, r18
		PORT_CTRL.OUTSET = SegTwo;
 908:	22 e0       	ldi	r18, 0x02	; 2
 90a:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
		PORT_SEGMENTS.OUT = seg_code[temp];
 90e:	99 27       	eor	r25, r25
 910:	fc 01       	movw	r30, r24
 912:	e0 50       	subi	r30, 0x00	; 0
 914:	f0 4c       	sbci	r31, 0xC0	; 192
 916:	80 81       	ld	r24, Z
 918:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		break;
 91c:	5a c0       	rjmp	.+180    	; 0x9d2 <__vector_9+0x19a>
		case 2:
		temp = (cnt / 10) % 10;
 91e:	20 91 22 40 	lds	r18, 0x4022	; 0x804022 <cnt>
 922:	30 91 23 40 	lds	r19, 0x4023	; 0x804023 <cnt+0x1>
 926:	ad ec       	ldi	r26, 0xCD	; 205
 928:	bc ec       	ldi	r27, 0xCC	; 204
 92a:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 92e:	fc 01       	movw	r30, r24
 930:	f6 95       	lsr	r31
 932:	e7 95       	ror	r30
 934:	f6 95       	lsr	r31
 936:	e7 95       	ror	r30
 938:	f6 95       	lsr	r31
 93a:	e7 95       	ror	r30
 93c:	9f 01       	movw	r18, r30
 93e:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 942:	96 95       	lsr	r25
 944:	87 95       	ror	r24
 946:	96 95       	lsr	r25
 948:	87 95       	ror	r24
 94a:	96 95       	lsr	r25
 94c:	87 95       	ror	r24
 94e:	9c 01       	movw	r18, r24
 950:	22 0f       	add	r18, r18
 952:	33 1f       	adc	r19, r19
 954:	88 0f       	add	r24, r24
 956:	99 1f       	adc	r25, r25
 958:	88 0f       	add	r24, r24
 95a:	99 1f       	adc	r25, r25
 95c:	88 0f       	add	r24, r24
 95e:	99 1f       	adc	r25, r25
 960:	82 0f       	add	r24, r18
 962:	93 1f       	adc	r25, r19
 964:	9f 01       	movw	r18, r30
 966:	28 1b       	sub	r18, r24
 968:	39 0b       	sbc	r19, r25
 96a:	c9 01       	movw	r24, r18
		PORT_CTRL.OUTSET = SegThree;
 96c:	21 e0       	ldi	r18, 0x01	; 1
 96e:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
		PORT_SEGMENTS.OUT = seg_code[temp];
 972:	99 27       	eor	r25, r25
 974:	fc 01       	movw	r30, r24
 976:	e0 50       	subi	r30, 0x00	; 0
 978:	f0 4c       	sbci	r31, 0xC0	; 192
 97a:	80 81       	ld	r24, Z
 97c:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		break;
 980:	28 c0       	rjmp	.+80     	; 0x9d2 <__vector_9+0x19a>
		case 3:
		temp = cnt % 10;
 982:	e0 91 22 40 	lds	r30, 0x4022	; 0x804022 <cnt>
 986:	f0 91 23 40 	lds	r31, 0x4023	; 0x804023 <cnt+0x1>
 98a:	9f 01       	movw	r18, r30
 98c:	ad ec       	ldi	r26, 0xCD	; 205
 98e:	bc ec       	ldi	r27, 0xCC	; 204
 990:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 994:	96 95       	lsr	r25
 996:	87 95       	ror	r24
 998:	96 95       	lsr	r25
 99a:	87 95       	ror	r24
 99c:	96 95       	lsr	r25
 99e:	87 95       	ror	r24
 9a0:	9c 01       	movw	r18, r24
 9a2:	22 0f       	add	r18, r18
 9a4:	33 1f       	adc	r19, r19
 9a6:	88 0f       	add	r24, r24
 9a8:	99 1f       	adc	r25, r25
 9aa:	88 0f       	add	r24, r24
 9ac:	99 1f       	adc	r25, r25
 9ae:	88 0f       	add	r24, r24
 9b0:	99 1f       	adc	r25, r25
 9b2:	82 0f       	add	r24, r18
 9b4:	93 1f       	adc	r25, r19
 9b6:	9f 01       	movw	r18, r30
 9b8:	28 1b       	sub	r18, r24
 9ba:	39 0b       	sbc	r19, r25
 9bc:	c9 01       	movw	r24, r18
		PORT_CTRL.OUTSET = SegFour;
 9be:	28 e0       	ldi	r18, 0x08	; 8
 9c0:	20 93 85 04 	sts	0x0485, r18	; 0x800485 <__TEXT_REGION_LENGTH__+0x7e0485>
		PORT_SEGMENTS.OUT = seg_code[temp];
 9c4:	99 27       	eor	r25, r25
 9c6:	fc 01       	movw	r30, r24
 9c8:	e0 50       	subi	r30, 0x00	; 0
 9ca:	f0 4c       	sbci	r31, 0xC0	; 192
 9cc:	80 81       	ld	r24, Z
 9ce:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		break;
	}

	digit_count = (digit_count + 1) % 4;
 9d2:	84 2f       	mov	r24, r20
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	83 70       	andi	r24, 0x03	; 3
 9da:	90 78       	andi	r25, 0x80	; 128
 9dc:	99 23       	and	r25, r25
 9de:	24 f4       	brge	.+8      	; 0x9e8 <__vector_9+0x1b0>
 9e0:	01 97       	sbiw	r24, 0x01	; 1
 9e2:	8c 6f       	ori	r24, 0xFC	; 252
 9e4:	9f 6f       	ori	r25, 0xFF	; 255
 9e6:	01 96       	adiw	r24, 0x01	; 1
 9e8:	80 93 21 40 	sts	0x4021, r24	; 0x804021 <_ZZ10__vector_9E11digit_count>
	TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
 9ec:	e0 e0       	ldi	r30, 0x00	; 0
 9ee:	fa e0       	ldi	r31, 0x0A	; 10
 9f0:	83 85       	ldd	r24, Z+11	; 0x0b
 9f2:	81 60       	ori	r24, 0x01	; 1
 9f4:	83 87       	std	Z+11, r24	; 0x0b
}
 9f6:	ff 91       	pop	r31
 9f8:	ef 91       	pop	r30
 9fa:	bf 91       	pop	r27
 9fc:	af 91       	pop	r26
 9fe:	9f 91       	pop	r25
 a00:	8f 91       	pop	r24
 a02:	7f 91       	pop	r23
 a04:	6f 91       	pop	r22
 a06:	4f 91       	pop	r20
 a08:	3f 91       	pop	r19
 a0a:	2f 91       	pop	r18
 a0c:	0f 90       	pop	r0
 a0e:	0b be       	out	0x3b, r0	; 59
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <_Z10Timer_initv>:

// Funkcja inicjalizuj¹ca timer
void Timer_init() {
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
 a1a:	e0 e0       	ldi	r30, 0x00	; 0
 a1c:	fa e0       	ldi	r31, 0x0A	; 10
 a1e:	81 e0       	ldi	r24, 0x01	; 1
 a20:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.PER = 18;  // Przerwanie co 1000 cykli zegara
 a22:	82 e1       	ldi	r24, 0x12	; 18
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	86 a3       	std	Z+38, r24	; 0x26
 a28:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.CTRLA = TCA_SINGLE_CLKSEL_DIV1024_gc;
 a2a:	8e e0       	ldi	r24, 0x0E	; 14
 a2c:	80 83       	st	Z, r24
	TCA0.SINGLE.CTRLA |= TCA_SINGLE_ENABLE_bm;
 a2e:	80 81       	ld	r24, Z
 a30:	81 60       	ori	r24, 0x01	; 1
 a32:	80 83       	st	Z, r24
 a34:	08 95       	ret

00000a36 <_Z9Disp_initv>:
}

// Funkcja inicjalizujaca wyswietlacze
void Disp_init(){
	PORT_SEGMENTS.DIRSET = SegA | SegB | SegC | SegD | SegE | SegF | SegG | SegDot; // Data lines
 a36:	8f ef       	ldi	r24, 0xFF	; 255
 a38:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
	PORT_CTRL.DIRSET = SegOne | SegTwo | SegThree | SegFour; // Control lines
 a3c:	8f e0       	ldi	r24, 0x0F	; 15
 a3e:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7e0481>
 a42:	08 95       	ret

00000a44 <_Z13DisplayNumberj>:
}

// Funkcja do wywietlania liczby na wywietlaczu
void DisplayNumber(uint16_t value) {
	cnt = value;
 a44:	80 93 22 40 	sts	0x4022, r24	; 0x804022 <cnt>
 a48:	90 93 23 40 	sts	0x4023, r25	; 0x804023 <cnt+0x1>
 a4c:	08 95       	ret

00000a4e <__udivmodsi4>:
 a4e:	a1 e2       	ldi	r26, 0x21	; 33
 a50:	1a 2e       	mov	r1, r26
 a52:	aa 1b       	sub	r26, r26
 a54:	bb 1b       	sub	r27, r27
 a56:	fd 01       	movw	r30, r26
 a58:	0d c0       	rjmp	.+26     	; 0xa74 <__udivmodsi4_ep>

00000a5a <__udivmodsi4_loop>:
 a5a:	aa 1f       	adc	r26, r26
 a5c:	bb 1f       	adc	r27, r27
 a5e:	ee 1f       	adc	r30, r30
 a60:	ff 1f       	adc	r31, r31
 a62:	a2 17       	cp	r26, r18
 a64:	b3 07       	cpc	r27, r19
 a66:	e4 07       	cpc	r30, r20
 a68:	f5 07       	cpc	r31, r21
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__udivmodsi4_ep>
 a6c:	a2 1b       	sub	r26, r18
 a6e:	b3 0b       	sbc	r27, r19
 a70:	e4 0b       	sbc	r30, r20
 a72:	f5 0b       	sbc	r31, r21

00000a74 <__udivmodsi4_ep>:
 a74:	66 1f       	adc	r22, r22
 a76:	77 1f       	adc	r23, r23
 a78:	88 1f       	adc	r24, r24
 a7a:	99 1f       	adc	r25, r25
 a7c:	1a 94       	dec	r1
 a7e:	69 f7       	brne	.-38     	; 0xa5a <__udivmodsi4_loop>
 a80:	60 95       	com	r22
 a82:	70 95       	com	r23
 a84:	80 95       	com	r24
 a86:	90 95       	com	r25
 a88:	9b 01       	movw	r18, r22
 a8a:	ac 01       	movw	r20, r24
 a8c:	bd 01       	movw	r22, r26
 a8e:	cf 01       	movw	r24, r30
 a90:	08 95       	ret

00000a92 <__umulhisi3>:
 a92:	a2 9f       	mul	r26, r18
 a94:	b0 01       	movw	r22, r0
 a96:	b3 9f       	mul	r27, r19
 a98:	c0 01       	movw	r24, r0
 a9a:	a3 9f       	mul	r26, r19
 a9c:	70 0d       	add	r23, r0
 a9e:	81 1d       	adc	r24, r1
 aa0:	11 24       	eor	r1, r1
 aa2:	91 1d       	adc	r25, r1
 aa4:	b2 9f       	mul	r27, r18
 aa6:	70 0d       	add	r23, r0
 aa8:	81 1d       	adc	r24, r1
 aaa:	11 24       	eor	r1, r1
 aac:	91 1d       	adc	r25, r1
 aae:	08 95       	ret

00000ab0 <__muluhisi3>:
 ab0:	0e 94 49 05 	call	0xa92	; 0xa92 <__umulhisi3>
 ab4:	a5 9f       	mul	r26, r21
 ab6:	90 0d       	add	r25, r0
 ab8:	b4 9f       	mul	r27, r20
 aba:	90 0d       	add	r25, r0
 abc:	a4 9f       	mul	r26, r20
 abe:	80 0d       	add	r24, r0
 ac0:	91 1d       	adc	r25, r1
 ac2:	11 24       	eor	r1, r1
 ac4:	08 95       	ret

00000ac6 <_exit>:
 ac6:	f8 94       	cli

00000ac8 <__stop_program>:
 ac8:	ff cf       	rjmp	.-2      	; 0xac8 <__stop_program>
